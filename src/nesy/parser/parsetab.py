
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUS_MINleftTIMES_DIVATOM BAR CLAUSE_SEP COMMA DOT LBRACKET LPAREN NEG NUMBER OP PLUS_MIN PROB_SEP RBRACKET RPAREN SEMICOLON TIMES_DIV VARprogram : clause DOT program\n    | clause DOTclause : term CLAUSE_SEP arguments clause : term PROB_SEP termclause : termterm : ATOM LPAREN arguments RPARENarguments : term COMMA arguments\n    | termterm : ATOM\n    | NUMBERterm : VAR'
    
_lr_action_items = {'ATOM':([0,7,8,9,10,16,],[4,4,4,4,4,4,]),'NUMBER':([0,7,8,9,10,16,],[5,5,5,5,5,5,]),'VAR':([0,7,8,9,10,16,],[6,6,6,6,6,6,]),'$end':([1,7,11,],[0,-2,-1,]),'DOT':([2,3,4,5,6,12,13,14,17,18,],[7,-5,-9,-10,-11,-8,-3,-4,-6,-7,]),'CLAUSE_SEP':([3,4,5,6,17,],[8,-9,-10,-11,-6,]),'PROB_SEP':([3,4,5,6,17,],[9,-9,-10,-11,-6,]),'LPAREN':([4,],[10,]),'COMMA':([4,5,6,12,17,],[-9,-10,-11,16,-6,]),'RPAREN':([4,5,6,12,15,17,18,],[-9,-10,-11,-8,17,-6,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,7,],[1,11,]),'clause':([0,7,],[2,2,]),'term':([0,7,8,9,10,16,],[3,3,12,14,12,12,]),'arguments':([8,10,16,],[13,15,18,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> clause DOT program','program',3,'p_program','parser.py',9),
  ('program -> clause DOT','program',2,'p_program','parser.py',10),
  ('clause -> term CLAUSE_SEP arguments','clause',3,'p_clause','parser.py',18),
  ('clause -> term PROB_SEP term','clause',3,'p_prob_fact','parser.py',23),
  ('clause -> term','clause',1,'p_fact','parser.py',28),
  ('term -> ATOM LPAREN arguments RPAREN','term',4,'p_term','parser.py',33),
  ('arguments -> term COMMA arguments','arguments',3,'p_arguments','parser.py',38),
  ('arguments -> term','arguments',1,'p_arguments','parser.py',39),
  ('term -> ATOM','term',1,'p_term_atom','parser.py',47),
  ('term -> NUMBER','term',1,'p_term_atom','parser.py',48),
  ('term -> VAR','term',1,'p_term_var','parser.py',53),
]
